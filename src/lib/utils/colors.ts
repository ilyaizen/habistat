/**
 * Converts an HSL color value to a hex color value.
 * @param h - The hue value (0-360).
 * @param s - The saturation value (0-100).
 * @param l - The lightness value (0-100).
 * @returns The hex color string (e.g., "#RRGGBB").
 */
function hslToHex(h: number, s: number, l: number): string {
  s /= 100;
  l /= 100;

  const c = (1 - Math.abs(2 * l - 1)) * s;
  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
  const m = l - c / 2;
  let r = 0,
    g = 0,
    b = 0;

  if (0 <= h && h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (60 <= h && h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (120 <= h && h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (180 <= h && h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (240 <= h && h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (300 <= h && h <= 360) {
    r = c;
    g = 0;
    b = x;
  }

  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);

  return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
}

/**
 * Converts a hex color value to an HSL color value.
 * @param hex - The hex color string (e.g., "#RRGGBB").
 * @returns An object with h, s, and l properties.
 */
function hexToHsl(hex: string): { h: number; s: number; l: number } {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (!result) return { h: 0, s: 0, l: 0 };

  let r = parseInt(result[1], 16);
  let g = parseInt(result[2], 16);
  let b = parseInt(result[3], 16);

  r /= 255;
  g /= 255;
  b /= 255;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0;
  let s = 0;
  const l = (max + min) / 2;

  if (max !== min) {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }

  return { h: h * 360, s: s * 100, l: l * 100 };
}

/**
 * Generates an array of color shades from a base hex color.
 * The shades are generated by varying the lightness of the HSL representation of the base color.
 *
 * @param baseHex - The base color in hex format (e.g., "#3b82f6").
 * @param count - The number of shades to generate.
 * @param variation - The percentage of lightness variation between shades.
 * @returns An array of hex color strings.
 */
export function generateColorShades(
  baseHex: string,
  count: number,
  variation: number = 5
): string[] {
  if (!baseHex.startsWith("#")) return Array(count).fill("#cccccc");

  const shades: string[] = [];
  const { h, s, l } = hexToHsl(baseHex);

  // Define a clamp function to keep lightness within a reasonable range
  const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);

  // We'll generate shades around the base lightness
  const baseLightness = l;
  const step = variation;
  const startLightness = clamp(baseLightness - Math.floor(count / 2) * step, 15, 85);

  for (let i = 0; i < count; i++) {
    const newLightness = clamp(startLightness + i * step, 15, 90);
    shades.push(hslToHex(h, s, newLightness));
  }
  return shades;
}

/**
 * Tailwind v4 OKLCH 500-shade palette.
 * We store color NAMES in the DB. UI renders via OKLCH strings only.
 * Values below are approximations of 500 shades; replace with precise Tailwind v4
 * OKLCH numbers if desired. Keeping them here centralizes visual palette.
 */
export const ALLOWED_CALENDAR_COLORS = [
  "lime",
  "green",
  "emerald",
  "teal",
  "cyan",
  "sky",
  "blue",
  "indigo",
  "violet",
  "purple",
  "fuchsia",
  "pink",
  "rose",
  "red",
  "orange",
  "amber",
  "yellow"
] as const;

export type CalendarColor = (typeof ALLOWED_CALENDAR_COLORS)[number];

export const OKLCH_500: Record<CalendarColor, string> = {
  lime: "oklch(.85 .17 129)",
  green: "oklch(.78 .17 137)",
  emerald: "oklch(.75 .16 149)",
  teal: "oklch(.75 .14 187)",
  cyan: "oklch(.8 .14 205)",
  sky: "oklch(.78 .14 230)",
  blue: "oklch(.7 .2 255)",
  indigo: "oklch(.65 .21 265)",
  violet: "oklch(.66 .22 290)",
  purple: "oklch(.6 .22 327)",
  fuchsia: "oklch(.71 .24 330)",
  pink: "oklch(.78 .21 350)",
  rose: "oklch(.73 .22 18)",
  red: "oklch(.64 .24 25)",
  orange: "oklch(.77 .2 60)",
  amber: "oklch(.82 .17 75)",
  yellow: "oklch(.9 .14 100)"
};

/**
 * Map a color NAME to its OKLCH 500 CSS color string.
 * Defaults to indigo-500 when not found.
 */
export function colorNameToCss(name: string | null | undefined): string {
  const DEFAULT = OKLCH_500.indigo;
  if (!name) return DEFAULT;
  const n = name.trim().toLowerCase();
  return (OKLCH_500 as Record<string, string>)[n] ?? DEFAULT;
}

// Temporary compatibility alias: legacy callers used colorNameToHex for swatches.
// We now return OKLCH strings instead; callers should switch to colorNameToCss.
export const colorNameToHex = colorNameToCss;

// Deprecated: Hex-based APIs are no longer used.
// Kept as no-op for compatibility during transition.
export function hexToColorName(_hex: string | null | undefined): string | null {
  return null;
}

export function isAllowedCalendarColor(value: string | null | undefined): value is CalendarColor {
  if (!value) return false;
  const v = value.trim().toLowerCase();
  return (ALLOWED_CALENDAR_COLORS as readonly string[]).includes(v);
}

/**
 * Normalize arbitrary inputs (name or Tailwind-like token) to an allowed color NAME.
 * - If value is already an allowed name, returns it lowercased.
 * - If value is a token like "indigo-500", maps base to allowed if present.
 * - Otherwise defaults to a stable choice ("indigo").
 */
export function normalizeCalendarColor(value: string | null | undefined): CalendarColor {
  const DEFAULT_NAME: CalendarColor = "indigo";
  if (!value) return DEFAULT_NAME;
  const raw = value.trim().toLowerCase();

  // Already an allowed name
  if ((ALLOWED_CALENDAR_COLORS as readonly string[]).includes(raw)) return raw as CalendarColor;

  // Tailwind-like token: "indigo-500" -> "indigo"
  const base = raw.includes("-") ? raw.split("-")[0] : raw;
  if ((ALLOWED_CALENDAR_COLORS as readonly string[]).includes(base)) return base as CalendarColor;

  // Fallback
  return DEFAULT_NAME;
}
