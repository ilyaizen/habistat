/**
 * Converts an HSL color value to a hex color value.
 * @param h - The hue value (0-360).
 * @param s - The saturation value (0-100).
 * @param l - The lightness value (0-100).
 * @returns The hex color string (e.g., "#RRGGBB").
 */
function hslToHex(h: number, s: number, l: number): string {
  s /= 100;
  l /= 100;

  const c = (1 - Math.abs(2 * l - 1)) * s;
  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
  const m = l - c / 2;
  let r = 0,
    g = 0,
    b = 0;

  if (0 <= h && h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (60 <= h && h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (120 <= h && h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (180 <= h && h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (240 <= h && h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (300 <= h && h <= 360) {
    r = c;
    g = 0;
    b = x;
  }

  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);

  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

/**
 * Converts a hex color value to an HSL color value.
 * @param hex - The hex color string (e.g., "#RRGGBB").
 * @returns An object with h, s, and l properties.
 */
function hexToHsl(hex: string): { h: number; s: number; l: number } {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (!result) return { h: 0, s: 0, l: 0 };

  let r = parseInt(result[1], 16);
  let g = parseInt(result[2], 16);
  let b = parseInt(result[3], 16);

  ((r /= 255), (g /= 255), (b /= 255));
  const max = Math.max(r, g, b),
    min = Math.min(r, g, b);
  let h = 0,
    s = 0,
    l = (max + min) / 2;

  if (max !== min) {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }

  return { h: h * 360, s: s * 100, l: l * 100 };
}

/**
 * Generates an array of color shades from a base hex color.
 * The shades are generated by varying the lightness of the HSL representation of the base color.
 *
 * @param baseHex - The base color in hex format (e.g., "#3b82f6").
 * @param count - The number of shades to generate.
 * @param variation - The percentage of lightness variation between shades.
 * @returns An array of hex color strings.
 */
export function generateColorShades(
  baseHex: string,
  count: number,
  variation: number = 5
): string[] {
  if (!baseHex.startsWith("#")) return Array(count).fill("#cccccc");

  const shades: string[] = [];
  const { h, s, l } = hexToHsl(baseHex);

  // Define a clamp function to keep lightness within a reasonable range
  const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);

  // We'll generate shades around the base lightness
  const baseLightness = l;
  const step = variation;
  const startLightness = clamp(baseLightness - Math.floor(count / 2) * step, 15, 85);

  for (let i = 0; i < count; i++) {
    const newLightness = clamp(startLightness + i * step, 15, 90);
    shades.push(hslToHex(h, s, newLightness));
  }
  return shades;
}

/**
 * Color palette for consistent theming across the application.
 * Used for calendar colors, UI components, and sample data generation.
 */

export const COLOR_PALETTE = [
  { name: "Lime", value: "#84cc16" },
  { name: "Green", value: "#22c55e" },
  { name: "Emerald", value: "#10b981" },
  { name: "Teal", value: "#14b8a6" },
  { name: "Cyan", value: "#06b6d4" },
  { name: "Sky", value: "#0ea5e9" },
  { name: "Blue", value: "#3b82f6" },
  { name: "Indigo", value: "#6366f1" },
  { name: "Violet", value: "#8b5cf6" },
  { name: "Purple", value: "#a21caf" },
  { name: "Fuchsia", value: "#d946ef" },
  { name: "Pink", value: "#ec4899" },
  { name: "Rose", value: "#f43f5e" },
  { name: "Red", value: "#ef4444" },
  { name: "Orange", value: "#f97316" },
  { name: "Amber", value: "#f59e42" },
  { name: "Yellow", value: "#eab308" }
] as const;

// Type definition for color palette items
export type ColorPaletteItem = (typeof COLOR_PALETTE)[0];
